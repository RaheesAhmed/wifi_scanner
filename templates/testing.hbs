{{#> layout}}
<div class="testing-container">
    <div class="testing-header">
        <div class="interface-info">
            <h3>Interface: <span id="interface-name">{{interface}}</span></h3>
        </div>
        <div class="scan-controls">
            <button id="scan-btn" class="btn primary-btn">
                <i class="fas fa-search"></i> Scan Networks
            </button>
        </div>
    </div>
    
    <div class="testing-intro">
        <h2>Real-World Network Testing</h2>
        <p>This tool allows you to perform comprehensive security testing on wireless networks. It can identify common vulnerabilities and security issues.</p>
        <div class="disclaimer">
            <p><strong>Important:</strong> Only use this tool on networks you own or have explicit permission to test. Unauthorized testing is illegal in most jurisdictions.</p>
        </div>
    </div>
    
    <div class="scan-status" id="scan-status">
        <div class="spinner hidden" id="scan-spinner"></div>
        <p id="status-message">Ready to scan</p>
    </div>
    
    <div class="networks-container">
        <h3>Networks Found: <span id="networks-count">{{networks_count}}</span></h3>
        
        {{#if networks}}
        <div class="table-container">
            <table id="networks-table" class="data-table">
                <thead>
                    <tr>
                        <th>SSID</th>
                        <th>BSSID</th>
                        <th>Channel</th>
                        <th>Signal</th>
                        <th>Security</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="networks-tbody">
                    {{#each networks}}
                    <tr>
                        <td>{{this.ssid}}</td>
                        <td>{{this.bssid}}</td>
                        <td>{{this.channel}}</td>
                        <td>{{this.signal_strength}}</td>
                        <td>{{this.security}}</td>
                        <td>
                            <button class="btn small-btn test-btn" data-ssid="{{this.ssid}}" data-bssid="{{this.bssid}}" data-channel="{{this.channel}}">
                                <i class="fas fa-flask"></i> Test
                            </button>
                        </td>
                    </tr>
                    {{/each}}
                </tbody>
            </table>
        </div>
        {{else}}
        <div class="no-data">
            <p>No networks found. Click "Scan Networks" to find available networks.</p>
        </div>
        {{/if}}
    </div>
    
    <div class="test-status hidden" id="test-status">
        <div class="spinner"></div>
        <p id="test-message">Running tests...</p>
    </div>
    
    <div class="results-container hidden" id="results-container">
        <h3>Test Results</h3>
        <div class="results-list" id="results-list">
            {{#if test_results}}
                {{#each test_results}}
                <div class="result-item">
                    <i class="fas fa-exclamation-triangle"></i> {{this}}
                </div>
                {{/each}}
            {{else}}
                <div class="no-results">
                    <p>No test results yet. Select a network and click "Test" to begin.</p>
                </div>
            {{/if}}
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Testing functionality
        const scanBtn = document.getElementById('scan-btn');
        const scanSpinner = document.getElementById('scan-spinner');
        const statusMessage = document.getElementById('status-message');
        const networksCount = document.getElementById('networks-count');
        const networksTable = document.getElementById('networks-table');
        const networksTbody = document.getElementById('networks-tbody');
        const testStatus = document.getElementById('test-status');
        const testMessage = document.getElementById('test-message');
        const resultsContainer = document.getElementById('results-container');
        const resultsList = document.getElementById('results-list');
        
        // Scan for networks
        scanBtn.addEventListener('click', function() {
            scanSpinner.classList.remove('hidden');
            statusMessage.textContent = 'Scanning for networks...';
            
            fetch('/api/scan')
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    statusMessage.textContent = 'Scan started';
                    checkNetworks();
                } else {
                    statusMessage.textContent = 'Error: ' + data.message;
                    scanSpinner.classList.add('hidden');
                }
            })
            .catch(error => {
                statusMessage.textContent = 'Error: ' + error.message;
                scanSpinner.classList.add('hidden');
            });
        });
        
        // Check for networks periodically
        function checkNetworks() {
            fetch('/api/networks')
            .then(response => response.json())
            .then(data => {
                if (data.scanning) {
                    setTimeout(checkNetworks, 1000);
                } else {
                    scanSpinner.classList.add('hidden');
                    statusMessage.textContent = 'Scan completed';
                    updateNetworksList(data.networks);
                }
            })
            .catch(error => {
                console.error('Error checking networks:', error);
                scanSpinner.classList.add('hidden');
                statusMessage.textContent = 'Error checking networks';
            });
        }
        
        // Update networks list
        function updateNetworksList(networks) {
            networksCount.textContent = networks.length;
            
            // Clear table
            networksTbody.innerHTML = '';
            
            // Add networks to table
            networks.forEach(network => {
                const row = document.createElement('tr');
                
                const ssidCell = document.createElement('td');
                ssidCell.textContent = network.ssid;
                
                const bssidCell = document.createElement('td');
                bssidCell.textContent = network.bssid;
                
                const channelCell = document.createElement('td');
                channelCell.textContent = network.channel;
                
                const signalCell = document.createElement('td');
                signalCell.textContent = network.signal_strength;
                
                const securityCell = document.createElement('td');
                securityCell.textContent = network.security;
                
                const actionsCell = document.createElement('td');
                const testBtn = document.createElement('button');
                testBtn.className = 'btn small-btn test-btn';
                testBtn.dataset.ssid = network.ssid;
                testBtn.dataset.bssid = network.bssid;
                testBtn.dataset.channel = network.channel;
                testBtn.innerHTML = '<i class="fas fa-flask"></i> Test';
                actionsCell.appendChild(testBtn);
                
                row.appendChild(ssidCell);
                row.appendChild(bssidCell);
                row.appendChild(channelCell);
                row.appendChild(signalCell);
                row.appendChild(securityCell);
                row.appendChild(actionsCell);
                
                networksTbody.appendChild(row);
            });
        }
        
        // Handle test button clicks
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('test-btn') || e.target.parentElement.classList.contains('test-btn')) {
                const btn = e.target.classList.contains('test-btn') ? e.target : e.target.parentElement;
                const ssid = btn.dataset.ssid;
                const bssid = btn.dataset.bssid;
                const channel = btn.dataset.channel;
                
                testStatus.classList.remove('hidden');
                testMessage.textContent = `Running tests on ${ssid}...`;
                resultsContainer.classList.add('hidden');
                
                fetch('/api/real-world-test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ssid: ssid,
                        bssid: bssid,
                        channel: parseInt(channel)
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        testMessage.textContent = data.message;
                        checkTestResults();
                    } else {
                        testMessage.textContent = 'Error: ' + data.message;
                        setTimeout(() => {
                            testStatus.classList.add('hidden');
                        }, 3000);
                    }
                })
                .catch(error => {
                    testMessage.textContent = 'Error: ' + error.message;
                    setTimeout(() => {
                        testStatus.classList.add('hidden');
                    }, 3000);
                });
            }
        });
        
        // Check test results periodically
        function checkTestResults() {
            fetch('/api/test-results')
            .then(response => response.json())
            .then(data => {
                if (data.testing) {
                    setTimeout(checkTestResults, 2000);
                } else {
                    testStatus.classList.add('hidden');
                    resultsContainer.classList.remove('hidden');
                    updateTestResults(data.results);
                }
            })
            .catch(error => {
                console.error('Error checking test results:', error);
                testStatus.classList.add('hidden');
            });
        }
        
        // Update test results
        function updateTestResults(results) {
            // Clear results
            resultsList.innerHTML = '';
            
            if (results.length === 0) {
                const noResults = document.createElement('div');
                noResults.className = 'no-results';
                noResults.innerHTML = '<p>No vulnerabilities found. The network appears to be secure.</p>';
                resultsList.appendChild(noResults);
            } else {
                // Add results
                results.forEach(result => {
                    const resultItem = document.createElement('div');
                    resultItem.className = 'result-item';
                    
                    // Check if it's a vulnerability or a positive note
                    if (result.includes('No obvious vulnerabilities') || result.includes('well-secured')) {
                        resultItem.innerHTML = '<i class="fas fa-check-circle"></i> ' + result;
                        resultItem.classList.add('positive-result');
                    } else {
                        resultItem.innerHTML = '<i class="fas fa-exclamation-triangle"></i> ' + result;
                        resultItem.classList.add('negative-result');
                    }
                    
                    resultsList.appendChild(resultItem);
                });
            }
        }
        
        // Check if there are already test results
        if ({{results_count}} > 0) {
            resultsContainer.classList.remove('hidden');
        }
        
        // Check if a test is already running
        if ({{testing}}) {
            testStatus.classList.remove('hidden');
            checkTestResults();
        }
    });
</script>

<style>
    .testing-container {
        padding: 20px;
    }
    
    .testing-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .testing-intro {
        background-color: #f5f5f5;
        padding: 20px;
        border-radius: 5px;
        margin-bottom: 20px;
    }
    
    .disclaimer {
        margin-top: 15px;
        padding: 10px;
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        color: #856404;
    }
    
    .scan-status, .test-status {
        display: flex;
        align-items: center;
        background-color: #f0f8ff;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }
    
    .test-status.hidden, .results-container.hidden {
        display: none;
    }
    
    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid #3498db;
        width: 20px;
        height: 20px;
        animation: spin 1s linear infinite;
        margin-right: 10px;
    }
    
    .spinner.hidden {
        display: none;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    .networks-container {
        margin-bottom: 30px;
    }
    
    .results-container {
        background-color: #f9f9f9;
        padding: 20px;
        border-radius: 5px;
    }
    
    .results-list {
        margin-top: 15px;
    }
    
    .result-item {
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 4px;
        background-color: #fff;
        border-left: 4px solid #dc3545;
    }
    
    .result-item.positive-result {
        border-left: 4px solid #28a745;
    }
    
    .result-item.negative-result {
        border-left: 4px solid #dc3545;
    }
    
    .result-item i {
        margin-right: 10px;
    }
    
    .no-results, .no-data {
        text-align: center;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 5px;
    }
</style>
{{/layout}}
